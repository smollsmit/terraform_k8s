{{- $appname := printf "%s" (include "name" .) -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
  labels:
    app: {{ $appname }}
    chart: "{{.Chart.Name}}-{{.Chart.Version}}"
    release: "{{ .Release.Name }}"
  name: {{ $appname }}
spec:
  replicas: {{ default 3 .Values.replicas }}
  selector:
    matchLabels:
      app: {{ $appname }}
      release: "{{ .Release.Name }}"
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      annotations:
    {{- if .Values.prometheus.enabled }}
        prometheus.io/scrape: "true"
        prometheus.io/port: {{ .Values.prometheus.port | quote | default "8011" }}
    {{- end }}
      labels:
        app: {{ $appname }}
        release: "{{ .Release.Name }}"
    spec:
      containers:
      - env:
        - name: BUILD_ID
          value: {{ .Values.buildId | quote | default "000" }}
    {{- if or .Values.tracingEnanled .Values.tracingEnabled }}
        - name: JAEGER_AGENT_BINARY_PORT
          value: "6832"
        - name: JAEGER_AGENT_COMPACT_PORT
          value: "6831"
        - name: JAEGER_AGENT_SAMPLING_PORT
          value: "5778"
        - name: JAEGER_AGENT_ZIPKIN_THRIFT_PORT
          value: "5775"
        - name: JAEGER_AGENT_HOST
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.hostIP
    {{- end }}
    {{- if .Values.secrets }}
    {{- range $key, $value := .Values.secrets }}
        - name: {{ $key }}
          valueFrom:
            secretKeyRef:
              key: {{ $value }}
              name: {{ $appname }}
    {{- end }}
    {{- end }}
    {{- if .Values.configmap }}
        envFrom:
        - configMapRef:
            name: {{ $appname }}
    {{- end }}
        image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        imagePullPolicy: Always
        name: {{ $appname }}
        lifecycle:
          preStop:
            exec:
              command: ["sleep","10"]
        resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- if .Values.livenessProbe.enabled }}
        livenessProbe:
          failureThreshold: 3
    {{- if eq .Values.livenessProbe.mode "httpGet" }}
          httpGet:
            path: {{ .Values.livenessProbe.httpGet.path  }}
            port: {{ .Values.livenessProbe.httpGet.port | default 80 }}
            scheme: HTTP
    {{- end }}
    {{- if eq .Values.livenessProbe.mode "tcpSocket" }}
          tcpSocket:
            port: {{ .Values.livenessProbe.tcpSocket.port | default 80 }}
    {{- end }}
    {{- if eq .Values.livenessProbe.mode "execCommand" }}
          exec:
            command: [{{ .Values.livenessProbe.execCommand.command }}]
    {{- end }}
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
    {{- end }}
    {{- if .Values.readinessProbe.enabled }}
        readinessProbe:
          failureThreshold: 3
    {{- if eq .Values.readinessProbe.mode "httpGet" }}
          httpGet:
            path: {{ .Values.readinessProbe.httpGet.path  }}
            port: {{ .Values.readinessProbe.httpGet.port | default 80 }}
            scheme: HTTP
    {{- end }}
    {{- if eq .Values.readinessProbe.mode "tcpSocket" }}
          tcpSocket:
            port: {{ .Values.readinessProbe.tcpSocket.port }}
    {{- end }}
    {{- if eq .Values.readinessProbe.mode "execCommand" }}
          exec:
            command: [{{ .Values.readinessProbe.execCommand.command }}]
    {{- end }}
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 3
          timeoutSeconds: 1
    {{- end }}
    {{- if .Values.containerArgs }}
        args: [{{ .Values.containerArgs }}]
    {{- end }}
    {{- if or .Values.deploySecretHarbor .Values.deploySecretNexus }}
      imagePullSecrets:
      - name: regsecret
    {{- end }}
    {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
    {{- end }}
      restartPolicy: Always
